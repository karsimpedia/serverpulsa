// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== Enums ==========
enum UserRole {
  ADMIN
  RESELLER
}

enum ProductType {
  PULSA
  TAGIHAN
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
}

enum TransactionStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  REFUNDED
  CANCELED
  EXPIRED
  WAITING
}

enum TransactionType {
  TOPUP
  TAGIHAN_INQUIRY
  TAGIHAN_PAY
}

enum ChannelType {
  API
  IP
  PHONE
  APP_ID
  UUID
}

enum MutasiType {
  CREDIT
  DEBIT
  REFUND
  ADJUST
}

enum MutasiStatus {
  SUCCESS
  FAILED
  PENDING
}

enum CommissionValueType {
  AMOUNT
  PERCENT
}

enum CommissionBase {
  SELLPRICE
  MARGIN
}

// ========== Core Models ==========
model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  role      UserRole @default(RESELLER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reseller Reseller?
}

model Reseller {
  id           String   @id
  userId       String   @unique
  name         String
  apiKeyHash   String
  isActive     Boolean  @default(true)
  referralCode String?  @unique
  pin          String?
  address      String?
  parentId     String?
  levelCache   Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  parent   Reseller?  @relation("ResellerTree", fields: [parentId], references: [id])
  children Reseller[] @relation("ResellerTree")

  user                      User                       @relation(fields: [userId], references: [id])
  saldo                     Saldo?
  callbacks                 ResellerCallback[]
  channels                  ResellerChannel[]
  transactions              Transaction[]
  mutasi                    MutasiSaldo[]
  resellerPrices            ResellerPrice[]
  // Pricing/Komisi
  // DEPRECATED: ResellerPrice[] (tidak dipakai lagi)
  resellerMarkups           ResellerMarkup[]
  commissionPlanAssignments CommissionPlanAssignment[]
  commissionFlats           CommissionFlat[]
  TransactionCommission     TransactionCommission[]
  // --- Wallet komisi (back-relations) ---
  commissionBalance         CommissionBalance?         @relation("ResellerCommissionBalance")
  commissionMutations       CommissionMutation[]       @relation("ResellerCommissionMutations")
  commissionPayouts         CommissionPayout[]         @relation("ResellerCommissionPayouts")

  devices              Device[]
  ResellerGlobalMarkup ResellerGlobalMarkup[]

  @@index([parentId])
}

model Device {
  id         String    @id @default(uuid())
  resellerId String
  reseller   Reseller  @relation(fields: [resellerId], references: [id])
  type       String
  identifier String    @unique
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  lastSeenAt DateTime?
  lastIp     String?
}

model ResellerChannel {
  id         String      @id @default(uuid())
  resellerId String
  type       ChannelType
  value      String
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())

  reseller Reseller @relation(fields: [resellerId], references: [id])

  @@unique([resellerId, type, value])
}

model Saldo {
  resellerId String @id
  amount     BigInt @default(0)

  reseller Reseller @relation(fields: [resellerId], references: [id])
}

model MutasiSaldo {
  id           String       @id @default(uuid())
  trxId        String
  resellerId   String
  type         MutasiType
  source       String
  amount       BigInt
  beforeAmount BigInt
  afterAmount  BigInt
  note         String?
  reference    String?
  status       MutasiStatus @default(SUCCESS)
  createdAt    DateTime     @default(now())

  reseller Reseller @relation(fields: [resellerId], references: [id])

  @@index([resellerId, createdAt])
}

model ProductCategory {
  id          String    @id @default(uuid())
  name        String    @unique
  code        String?   @unique
  products    Product[]
  description String?
  prefixes    ProductCategoryPrefix[]  
  createdAt   DateTime  @default(now())
}

model ProductCategoryPrefix {
  id          String          @id @default(uuid())
  categoryId  String
  category    ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  prefix      String          // contoh: "0817"
  length      Int             @default(4)

  createdAt   DateTime        @default(now())

  @@index([prefix])
  @@unique([categoryId, prefix]) // prefix unik per kategori
}



model Product {
  id        String      @id @default(uuid())
  code      String      @unique
  name      String
  type      ProductType
  nominal   Int?
  basePrice BigInt
  margin    BigInt      @default(0)
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())

  supplierProducts SupplierProduct[]
  resellerPrices   ResellerPrice[]
  commissionRules  CommissionRule[]
  Transaction      Transaction[]
  CommissionFlat   CommissionFlat[]
  categoryId       String?
  category         ProductCategory?  @relation(fields: [categoryId], references: [id])
  resellerMarkups  ResellerMarkup[]
}

model SupplierConfig {
  id         String   @id @default(uuid())
  supplierId String   @unique
  version    Int      @default(1)
  defaults   Json? // { timeoutMs, headers, ... }
  ops        Json // { topup: {...}, inquiry: {...}, paybill: {...}, callback?: {...} }
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  supplier Supplier @relation(fields: [supplierId], references: [id])
}

model Supplier {
  id        String         @id @default(uuid())
  name      String
  code      String         @unique
  status    SupplierStatus @default(ACTIVE)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  endpoints SupplierEndpoint[]
  products  SupplierProduct[]
  config    SupplierConfig?
}

model SupplierEndpoint {
  id         String   @id @default(uuid())
  supplierId String
  name       String
  baseUrl    String
  apiKey     String?
  secret     String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())

  lastHealthAt  DateTime?
  lastStatus    String?
  lastLatencyMs Int?
  failCount     Int       @default(0)
  successCount  Int       @default(0)

  healthLogs SupplierHealthLog[]
  supplier   Supplier            @relation(fields: [supplierId], references: [id])
}

model SupplierProduct {
  id          String   @id @default(uuid())
  supplierId  String
  productId   String
  supplierSku String
  costPrice   BigInt
  isAvailable Boolean  @default(true)
  priority    Int      @default(100)
  updatedAt   DateTime @updatedAt

  supplier Supplier @relation(fields: [supplierId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])

  @@unique([supplierId, productId])
  @@index([productId, isAvailable, priority])
}

model ResellerCallback {
  id         String   @id @default(uuid())
  resellerId String
  url        String
  secret     String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())

  reseller Reseller @relation(fields: [resellerId], references: [id])
}

model Transaction {
  id              String            @id @default(uuid())
  invoiceId       String            @unique
  resellerId      String
  productId       String
  msisdn          String
  type            TransactionType   @default(TOPUP)
  sellPrice       BigInt
  supplierPrice   BigInt            @default(0)
  adminFee        BigInt            @default(0)
  status          TransactionStatus @default(PENDING)
  supplierId      String?
  supplierRef     String?  
  supplierPayload Json?
  supplierResult  Json?
  callbackSentAt  DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  expiresAt       DateTime?
  externalRefId   String?
  message         String?
  serial          String?  
  reseller Reseller @relation(fields: [resellerId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])

  commissions         TransactionCommission[]
  // --- Wallet komisi (back-relation) ---
  commissionMutations CommissionMutation[]    @relation("TransactionCommissionMutations")

  @@unique([resellerId, externalRefId])
  @@index([resellerId, productId, msisdn, createdAt])
}

// ========== Pricing by MARKUP (baru, dipakai) ==========
model ResellerMarkup {
  id         String @id @default(uuid())
  resellerId String
  productId  String
  markup     BigInt @default(0)

  reseller Reseller @relation(fields: [resellerId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])

  @@unique([resellerId, productId])
}

model ResellerGlobalMarkup {
  resellerId String @id
  markup     BigInt @default(0)

  reseller Reseller @relation(fields: [resellerId], references: [id])
}

// ========== (Opsional) Sistem Komisi Tambahan ==========
model CommissionPlan {
  id        String         @id @default(uuid())
  name      String
  isActive  Boolean        @default(true)
  base      CommissionBase @default(MARGIN)
  maxLevels Int            @default(3)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  rules       CommissionRule[]
  assignments CommissionPlanAssignment[]
}

model CommissionRule {
  id        String              @id @default(uuid())
  planId    String
  level     Int
  valueType CommissionValueType
  value     BigInt
  productId String?

  plan    CommissionPlan @relation(fields: [planId], references: [id])
  product Product?       @relation(fields: [productId], references: [id])

  @@unique([planId, level, productId])
}

model CommissionPlanAssignment {
  id         String @id @default(uuid())
  resellerId String @unique
  planId     String

  reseller Reseller       @relation(fields: [resellerId], references: [id])
  plan     CommissionPlan @relation(fields: [planId], references: [id])
}

// Ledger payout komisi per transaksi
model TransactionCommission {
  id            String   @id @default(uuid())
  transactionId String
  resellerId    String
  level         Int
  amount        BigInt
  createdAt     DateTime @default(now())

  transaction Transaction @relation(fields: [transactionId], references: [id])
  reseller    Reseller    @relation(fields: [resellerId], references: [id])

  @@unique([transactionId, resellerId, level])
  @@index([transactionId])
}

// DEPRECATED: tidak dipakai lagi
model ResellerPrice {
  id         String @id @default(uuid())
  resellerId String
  productId  String
  sellPrice  BigInt

  reseller Reseller @relation(fields: [resellerId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])

  @@unique([resellerId, productId])
}

model CommissionFlat {
  id         String   @id @default(uuid())
  resellerId String
  level      Int
  amount     BigInt
  productId  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  reseller Reseller @relation(fields: [resellerId], references: [id])
  product  Product? @relation(fields: [productId], references: [id])

  @@unique([resellerId, level, productId])
  @@index([resellerId, level])
}

// --- Opsional log kesehatan untuk audit ringkas ---
model SupplierHealthLog {
  id         String   @id @default(uuid())
  endpointId String
  checkedAt  DateTime @default(now())
  status     String // "UP" | "DOWN" | "DEGRADED"
  latencyMs  Int?
  message    String?

  endpoint SupplierEndpoint @relation(fields: [endpointId], references: [id])

  @@index([endpointId, checkedAt])
}

// Saldo komisi per reseller (agregat)
model CommissionBalance {
  resellerId String   @id
  amount     BigInt   @default(0)
  reseller   Reseller @relation("ResellerCommissionBalance", fields: [resellerId], references: [id])
}

model CommissionMutation {
  id            String   @id @default(uuid())
  resellerId    String
  transactionId String? // jika earn/reversal dari transaksi tertentu
  type          String // "EARN" | "REVERSAL" | "PAYOUT"
  amount        BigInt // EARN=+, REVERSAL/PAYOUT=-
  beforeAmount  BigInt
  afterAmount   BigInt
  note          String?
  createdAt     DateTime @default(now())

  reseller    Reseller     @relation("ResellerCommissionMutations", fields: [resellerId], references: [id])
  transaction Transaction? @relation("TransactionCommissionMutations", fields: [transactionId], references: [id])

  @@index([resellerId, createdAt])
}

model CommissionPayout {
  id          String    @id @default(uuid())
  resellerId  String
  amount      BigInt
  fee         BigInt    @default(0)
  status      String    @default("PENDING") // "PENDING" | "APPROVED" | "REJECTED" | "PAID" | "CANCELED"
  note        String?
  createdAt   DateTime  @default(now())
  processedAt DateTime?
  approverId  String? // User.id admin yang memproses

  reseller Reseller @relation("ResellerCommissionPayouts", fields: [resellerId], references: [id])

  @@index([resellerId, status, createdAt])
}
